const mysql = require('../../database/index');
const { spawn } = require('child_process');
const path = require('path');

// Ëé∑ÂèñÈ°πÁõÆÂõæÁâáÁöÑËæÖÂä©ÂáΩÊï∞
const getProductImage = (projectCode) => {
  const imageMap = {
    'RWA001': '/pics/TYMU.png',
    'RWA002': '/pics/SQNB.png',
    'RWA003': '/pics/LZYT.png',
    'RWA004': '/pics/YYD.png',
    'RWA005': '/pics/TYMU.png',
    'RWA006': '/pics/SQNB.png',
    'RWA007': '/pics/LZYT.png',
    'RWA008': '/pics/YYD.png',
    'RWA009': '/pics/TYMU.png',
    'RWA010': '/pics/SQNB.png'
  };
  return imageMap[projectCode] || '/pics/TYMU.png';
};

// Ëé∑ÂèñÊâÄÊúâÈ°πÁõÆÂàóË°®
const getAllProjects = async (req, res) => {
  try {
    console.log('üîç ÂºÄÂßãÊü•ËØ¢ÊâÄÊúâÈ°πÁõÆËØ¶ÊÉÖ...');
    const sql = `
      SELECT 
        id, project_code, project_name, loan_status, created_at,
        subscribe_token, total_offering_token,
        property_location, property_state, property_type, property_value, property_summary,
        loan_type, loan_product, loan_amount, loan_purpose,
        loan_term_months, lvr, interest_rate, default_rate,
        commencement_date, expiry_date, expected_recovery_date,
        principal_token_address, interest_token_address, kyc_registry_address, loan_issuer_address
      FROM project 
      ORDER BY created_at DESC
    `;
    
    const [rows] = await mysql.promise().execute(sql);
    
    // Ê†ºÂºèÂåñÊï∞ÊçÆ‰ª•ÂåπÈÖçÂâçÁ´ØÂ≠óÊÆµÁªìÊûÑ
    const formattedProjects = rows.map(project => ({
      // Âü∫Á°Ä‰ø°ÊÅØ
      id: project.id,
      code: project.project_code,
      name: project.project_name,
      status: project.loan_status,
      createdAt: project.created_at,
      
      // ÊäïËµÑ‰ø°ÊÅØ
      totalToken: project.total_offering_token,
      currentSubscribedToken: project.subscribe_token,
      subscribe_token: project.subscribe_token,
      total_offering_token: project.total_offering_token,
      
      // Áâ©‰∏ö‰ø°ÊÅØ
      propertyLocation: project.property_location,
      propertyState: project.property_state,
      propertyType: project.property_type,
      propertyValue: project.property_value,
      propertySummary: project.property_summary,
      
      // Ë¥∑Ê¨æ‰ø°ÊÅØ
      loanType: project.loan_type,
      loanProduct: project.loan_product,
      loanAmount: project.loan_amount,
      loanPurpose: project.loan_purpose,
      loanTermMonths: project.loan_term_months,
      
      // Ë¥∑Ê¨æÊØîÁéá
      lvr: project.lvr,
      interestRate: project.interest_rate,
      defaultRate: project.default_rate,
      
      // Ë¥∑Ê¨æÂë®Êúü
      commencementDate: project.commencement_date,
      expiryDate: project.expiry_date,
      expectedRecoveryDate: project.expected_recovery_date,

      //ÂêàÁ∫¶‰ø°ÊÅØ
      principaltokenaddress: project.principal_token_address,
      interesttokenaddress: project.interest_token_address,
      loanissueraddress: project.loan_issuer_address,
      kycregistryaddress: project.kyc_registry_address,
      
      // ÂâçÁ´ØÊòæÁ§∫ÈúÄË¶ÅÁöÑÂ≠óÊÆµ
      image: getProductImage(project.project_code)
    }));
    
    res.cc('Ëé∑ÂèñÈ°πÁõÆÂàóË°®ÊàêÂäü', 0, formattedProjects);
  } catch (error) {
    console.error('Ëé∑ÂèñÈ°πÁõÆÂàóË°®Â§±Ë¥•:', error);
    res.cc('Ëé∑ÂèñÈ°πÁõÆÂàóË°®Â§±Ë¥•', 1);
  }
};

// Ê†πÊçÆÈ°πÁõÆIDËé∑ÂèñÈ°πÁõÆËØ¶ÊÉÖ
const getProjectById = async (req, res) => {
  try {
    const { projectId } = req.params;
    console.log('üîç Ê†πÊçÆIDËé∑ÂèñÈ°πÁõÆËØ¶ÊÉÖ:', projectId);
    
    const sql = `
      SELECT 
        id, project_code, project_name, loan_status, created_at,
        subscribe_token, total_offering_token,
        property_location, property_state, property_type, property_value, property_summary,
        loan_type, loan_product, loan_amount, loan_purpose,
        loan_term_months, lvr, interest_rate, default_rate,
        commencement_date, expiry_date, expected_recovery_date
      FROM project 
      WHERE id = ?
    `;
    
    const [rows] = await mysql.promise().execute(sql, [projectId]);
    
    if (rows.length === 0) {
      return res.cc('È°πÁõÆ‰∏çÂ≠òÂú®', 1);
    }
    
    const project = rows[0];
    const formattedProject = {
      // Âü∫Á°Ä‰ø°ÊÅØ
      id: project.id,
      code: project.project_code,
      name: project.project_name,
      status: project.loan_status,
      createdAt: project.created_at,
      
      // ÊäïËµÑ‰ø°ÊÅØ
      totalToken: project.total_offering_token,
      currentSubscribedToken: project.subscribe_token,
      subscribe_token: project.subscribe_token,
      total_offering_token: project.total_offering_token,
      
      // Áâ©‰∏ö‰ø°ÊÅØ
      propertyLocation: project.property_location,
      propertyState: project.property_state,
      propertyType: project.property_type,
      propertyValue: project.property_value,
      propertySummary: project.property_summary,
      
      // Ë¥∑Ê¨æ‰ø°ÊÅØ
      loanType: project.loan_type,
      loanProduct: project.loan_product,
      loanAmount: project.loan_amount,
      loanPurpose: project.loan_purpose,
      loanTermMonths: project.loan_term_months,
      
      // Ë¥∑Ê¨æÊØîÁéá
      lvr: project.lvr,
      interestRate: project.interest_rate,
      defaultRate: project.default_rate,
      
      // Ë¥∑Ê¨æÂë®Êúü
      commencementDate: project.commencement_date,
      expiryDate: project.expiry_date,
      expectedRecoveryDate: project.expected_recovery_date,
      
      // ÂâçÁ´ØÊòæÁ§∫ÈúÄË¶ÅÁöÑÂ≠óÊÆµ
      image: getProductImage(project.project_code)
    };
    
    res.cc('Ëé∑ÂèñÈ°πÁõÆËØ¶ÊÉÖÊàêÂäü', 0, formattedProject);
  } catch (error) {
    console.error('Ëé∑ÂèñÈ°πÁõÆËØ¶ÊÉÖÂ§±Ë¥•:', error);
    res.cc('Ëé∑ÂèñÈ°πÁõÆËØ¶ÊÉÖÂ§±Ë¥•', 1);
  }
};

// Ê†πÊçÆÈ°πÁõÆ‰ª£Á†ÅËé∑ÂèñÈ°πÁõÆËØ¶ÊÉÖ
const getProjectByCode = async (req, res) => {
  try {
    const { code } = req.params;
    console.log('üîç Ê†πÊçÆ‰ª£Á†ÅËé∑ÂèñÈ°πÁõÆËØ¶ÊÉÖ:', code);
    
    const sql = `
      SELECT 
        id, project_code, project_name, loan_status, created_at,
        subscribe_token, total_offering_token,
        property_location, property_state, property_type, property_value, property_summary,
        loan_type, loan_product, loan_amount, loan_purpose,
        loan_term_months, lvr, interest_rate, default_rate,
        commencement_date, expiry_date, expected_recovery_date,
        principal_token_address, interest_token_address, kyc_registry_address, loan_issuer_address
      FROM project 
      WHERE project_code = ?
    `;
    
    const [rows] = await mysql.promise().execute(sql, [code]);
    
    if (rows.length === 0) {
      return res.cc('È°πÁõÆ‰∏çÂ≠òÂú®', 1);
    }
    
    const project = rows[0];
    const formattedProject = {
      // Âü∫Á°Ä‰ø°ÊÅØ
      id: project.id,
      project_code: project.project_code,
      project_name: project.project_name,
      loan_status: project.loan_status,
      created_at: project.created_at,
      
      // ËÆ§Ë¥≠‰ø°ÊÅØ
      subscribe_token: project.subscribe_token,
      total_offering_token: project.total_offering_token,
      
      // ÊäµÊäºËµÑ‰∫ßÁâ©‰∏ö‰ø°ÊÅØ
      property_location: project.property_location,
      property_state: project.property_state,
      property_type: project.property_type,
      property_value: project.property_value,
      property_summary: project.property_summary,
      
      // Ë¥∑Ê¨æÂü∫Êú¨‰ø°ÊÅØ
      loan_type: project.loan_type,
      loan_product: project.loan_product,
      loan_amount: project.loan_amount,
      loan_purpose: project.loan_purpose,
      
      // Ë¥∑Ê¨æÊù°Ê¨æ
      loan_term_months: project.loan_term_months,
      
      // Ë¥∑Ê¨æÊØîÁéá
      lvr: project.lvr,
      interest_rate: project.interest_rate,
      default_rate: project.default_rate,
      
      // Ë¥∑Ê¨æÂë®Êúü
      commencement_date: project.commencement_date,
      expiry_date: project.expiry_date,
      expected_recovery_date: project.expected_recovery_date,

      //ÂêàÁ∫¶‰ø°ÊÅØ
      principaltokenaddress: project.principal_token_address,
      interesttokenaddress: project.interest_token_address,
      loanissueraddress: project.loan_issuer_address,
      kycregistryaddress: project.kyc_registry_address,
      
      // ÂâçÁ´ØÊòæÁ§∫ÈúÄË¶ÅÁöÑÂ≠óÊÆµ
      image: getProductImage(project.project_code)
    };
    
    res.cc('Ëé∑ÂèñÈ°πÁõÆËØ¶ÊÉÖÊàêÂäü', 0, formattedProject);
  } catch (error) {
    console.error('Ëé∑ÂèñÈ°πÁõÆËØ¶ÊÉÖÂ§±Ë¥•:', error);
    res.cc('Ëé∑ÂèñÈ°πÁõÆËØ¶ÊÉÖÂ§±Ë¥•', 1);
  }
};

// ÂàõÂª∫Êñ∞È°πÁõÆ
const createProject = async (req, res) => {
  try {
    const projectData = req.body;
    console.log('üìù ÂàõÂª∫Êñ∞È°πÁõÆ:', projectData);
    
    const sql = `
      INSERT INTO project (
        project_code, project_name, loan_status, subscribe_token, total_offering_token,
        property_location, property_state, property_type, property_value, property_summary,
        loan_type, loan_product, loan_amount, loan_purpose,
        loan_term_months, lvr, interest_rate, default_rate,
        commencement_date, expiry_date, expected_recovery_date,
        created_by, updated_by
        principal_token_address, interest_token_address, kyc_registry_address, loan_issuer_address
      ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
    `;
    
    const values = [
      projectData.project_code,
      projectData.project_name,
      projectData.loan_status || 'INCOMING',
      projectData.subscribe_token || 0,
      projectData.total_offering_token,
      projectData.property_location,
      projectData.property_state,
      projectData.property_type,
      projectData.property_value,
      projectData.property_summary,
      projectData.loan_type,
      projectData.loan_product,
      projectData.loan_amount,
      projectData.loan_purpose,
      projectData.loan_term_months,
      projectData.lvr,
      projectData.interest_rate,
      projectData.default_rate,
      projectData.commencement_date,
      projectData.expiry_date,
      projectData.expected_recovery_date,
      projectData.created_by || 'system',
      projectData.updated_by || 'system',
      projectData.principal_token_address,
      projectData.interest_token_address,
      projectData.kyc_registry_address,
      projectData.loan_issuer_address
    ];
    
    const [result] = await mysql.promise().execute(sql, values);
    
    res.cc('ÂàõÂª∫È°πÁõÆÊàêÂäü', 0, {
      id: result.insertId,
      project_code: projectData.project_code
    });
  } catch (error) {
    console.error('ÂàõÂª∫È°πÁõÆÂ§±Ë¥•:', error);
    res.cc('ÂàõÂª∫È°πÁõÆÂ§±Ë¥•', 1);
  }
};

// Êõ¥Êñ∞È°πÁõÆËÆ¢ÈòÖ‰ø°ÊÅØ
const updateProjectSubscription = async (req, res) => {
  try {
    const { code } = req.params;
    const { subscribe_token } = req.body;
    console.log('üìä Êõ¥Êñ∞È°πÁõÆËÆ¢ÈòÖ‰ø°ÊÅØ:', code, subscribe_token);
    
    const sql = `UPDATE project SET subscribe_token = ?, updated_at = CURRENT_TIMESTAMP WHERE project_code = ?`;
    const [result] = await mysql.promise().execute(sql, [subscribe_token, code]);
    
    if (result.affectedRows === 0) {
      return res.cc('È°πÁõÆ‰∏çÂ≠òÂú®', 1);
    }
    
    res.cc('Êõ¥Êñ∞ËÆ¢ÈòÖ‰ø°ÊÅØÊàêÂäü', 0, {
      project_code: code,
      subscribe_token: subscribe_token
    });
  } catch (error) {
    console.error('Êõ¥Êñ∞ËÆ¢ÈòÖ‰ø°ÊÅØÂ§±Ë¥•:', error);
    res.cc('Êõ¥Êñ∞ËÆ¢ÈòÖ‰ø°ÊÅØÂ§±Ë¥•', 1);
  }
};

// ÈÉ®ÁΩ≤Êô∫ËÉΩÂêàÁ∫¶Âπ∂Â§ÑÁêÜËÆ§Ë¥≠
const deploySmartContracts = async (req, res) => {
  try {
    const {
      projectCode,
      tradeType,
      amount,
      userAddress
    } = req.body;

    // È™åËØÅÂøÖÈúÄÂèÇÊï∞
    if (!projectCode || !tradeType || !amount || !userAddress) {
      return res.status(400).json({ 
        status: 1, 
        message: 'Áº∫Â∞ëÂøÖÈúÄÂèÇÊï∞' 
      });
    }

    console.log('üöÄ ÂºÄÂßãÈÉ®ÁΩ≤Êô∫ËÉΩÂêàÁ∫¶:', {
      projectCode,
      tradeType,
      amount,
      userAddress
    });

    // Ë∞ÉÁî®ÂÆûÈôÖÁöÑÊô∫ËÉΩÂêàÁ∫¶ÈÉ®ÁΩ≤
    const deploymentResult = await deploySmartContractsToTestnet({
      projectCode,
      tradeType,
      amount: parseFloat(amount),
      userAddress
    });

    console.log('‚úÖ Êô∫ËÉΩÂêàÁ∫¶ÈÉ®ÁΩ≤ÂÆåÊàê:', deploymentResult);

    return res.status(200).json({
      status: 0,
      message: 'Êô∫ËÉΩÂêàÁ∫¶ÈÉ®ÁΩ≤ÊàêÂäü',
      data: deploymentResult
    });

  } catch (error) {
    console.error('‚ùå Êô∫ËÉΩÂêàÁ∫¶ÈÉ®ÁΩ≤Â§±Ë¥•:', error);
    return res.status(500).json({
      status: 1,
      message: 'Êô∫ËÉΩÂêàÁ∫¶ÈÉ®ÁΩ≤Â§±Ë¥•: ' + error.message
    });
  }
};

// ÂÆûÈôÖÈÉ®ÁΩ≤Êô∫ËÉΩÂêàÁ∫¶Âà∞ÊµãËØïÁΩë
const deploySmartContractsToTestnet = async (params) => {
  return new Promise((resolve, reject) => {
    const { projectCode, tradeType, amount, userAddress } = params;
    
    console.log('üöÄ ÂºÄÂßãÂÆûÈôÖÈÉ®ÁΩ≤Êô∫ËÉΩÂêàÁ∫¶Âà∞ÊµãËØïÁΩë...');
    console.log('ÂèÇÊï∞:', { projectCode, tradeType, amount, userAddress });
    
    // ÊûÑÂª∫hardhatÂëΩ‰ª§
    const contractDir = path.join(__dirname, '../../../my-contract');
    const hardhatCommand = 'npx';
    const hardhatArgs = [
      'hardhat',
      'run',
      'scripts/api-deploy.js',
      '--network',
      'sepolia'
    ];
    
    console.log('ÊâßË°åÂëΩ‰ª§:', hardhatCommand, hardhatArgs.join(' '));
    console.log('Â∑•‰ΩúÁõÆÂΩï:', contractDir);
    
    // ËÆæÁΩÆÁéØÂ¢ÉÂèòÈáè
    const env = {
      ...process.env,
      PROJECT_CODE: projectCode,
      TRADE_TYPE: tradeType,
      AMOUNT: amount.toString(),
      USER_ADDRESS: userAddress
    };
    
    // ÂêØÂä®hardhatËøõÁ®ã
    const hardhatProcess = spawn(hardhatCommand, hardhatArgs, {
      cwd: contractDir,
      env: env,
      stdio: ['pipe', 'pipe', 'pipe']
    });
    
    let stdout = '';
    let stderr = '';
    
    hardhatProcess.stdout.on('data', (data) => {
      const output = data.toString();
      stdout += output;
      console.log('HardhatËæìÂá∫:', output.trim());
    });
    
    hardhatProcess.stderr.on('data', (data) => {
      const output = data.toString();
      stderr += output;
      console.error('HardhatÈîôËØØ:', output.trim());
    });
    
    hardhatProcess.on('close', (code) => {
      console.log(`HardhatËøõÁ®ãÈÄÄÂá∫Ôºå‰ª£Á†Å: ${code}`);
      
      if (code === 0) {
        try {
          // Â∞ùËØï‰ªéËæìÂá∫‰∏≠ÊèêÂèñJSONÁªìÊûú
          const lines = stdout.split('\n');
          let result = null;
          
          // Êü•ÊâæJSONÁªìÊûúÊ†áËÆ∞
          let jsonStart = false;
          let jsonLines = [];
          
          for (const line of lines) {
            if (line.includes('üéØ JSON_START')) {
              jsonStart = true;
              continue;
            }
            if (line.includes('üéØ JSON_END')) {
              break;
            }
            if (jsonStart) {
              jsonLines.push(line);
            }
          }
          
          // Ëß£ÊûêJSON
          if (jsonLines.length > 0) {
            try {
              const jsonStr = jsonLines.join('');
              result = JSON.parse(jsonStr);
              console.log('‚úÖ ÊàêÂäüËß£ÊûêJSONÁªìÊûú');
            } catch (e) {
              console.warn('Ëß£ÊûêJSONÂ§±Ë¥•:', e.message);
              console.warn('JSONÂÜÖÂÆπ:', jsonStr);
            }
          }
          
          // Â¶ÇÊûúÊ≤°ÊâæÂà∞Ê†áËÆ∞ÁöÑJSONÔºåÂ∞ùËØïÊü•ÊâæÂÖ∂‰ªñÊ†ºÂºè
          if (!result) {
            for (const line of lines) {
              if (line.includes('üìä ÈÉ®ÁΩ≤ÁªìÊûú:')) {
                try {
                  const jsonStart = line.indexOf('{');
                  if (jsonStart !== -1) {
                    const jsonStr = line.substring(jsonStart);
                    result = JSON.parse(jsonStr);
                    break;
                  }
                } catch (e) {
                  console.warn('Ëß£ÊûêJSONÂ§±Ë¥•:', e.message);
                }
              }
            }
          }
          
          if (result) {
            console.log('‚úÖ ÂêàÁ∫¶ÈÉ®ÁΩ≤ÊàêÂäüÔºåËß£ÊûêÁªìÊûú:', result);
            resolve(result);
          } else {
            // Â¶ÇÊûúÊó†Ê≥ïËß£ÊûêJSONÔºåËøîÂõûËØ¶ÁªÜÈîôËØØ‰ø°ÊÅØ
            console.error('‚ùå Êó†Ê≥ïËß£ÊûêÈÉ®ÁΩ≤ÁªìÊûú');
            console.error('HardhatÊ†áÂáÜËæìÂá∫:', stdout);
            console.error('HardhatÈîôËØØËæìÂá∫:', stderr);
            
            let errorMsg = 'Êó†Ê≥ïËß£ÊûêÂêàÁ∫¶ÈÉ®ÁΩ≤ÁªìÊûú„ÄÇ\n';
            errorMsg += 'ÂèØËÉΩÁöÑÂéüÂõ†:\n';
            errorMsg += '1. ÂêàÁ∫¶ÈÉ®ÁΩ≤Â§±Ë¥•\n';
            errorMsg += '2. ÁéØÂ¢ÉÂèòÈáèÈÖçÁΩÆÈîôËØØ\n';
            errorMsg += '3. ÁΩëÁªúËøûÊé•ÈóÆÈ¢ò\n';
            errorMsg += '4. ÁßÅÈí•‰ΩôÈ¢ù‰∏çË∂≥\n\n';
            errorMsg += 'HardhatËæìÂá∫:\n';
            errorMsg += stdout || '(Êó†ËæìÂá∫)\n';
            errorMsg += '\nÈîôËØØËæìÂá∫:\n';
            errorMsg += stderr || '(Êó†ÈîôËØØËæìÂá∫)';
            
            reject(new Error(errorMsg));
          }
        } catch (error) {
          console.error('‚ùå Ëß£ÊûêÈÉ®ÁΩ≤ÁªìÊûúÂ§±Ë¥•:', error);
          reject(new Error('Ëß£ÊûêÈÉ®ÁΩ≤ÁªìÊûúÂ§±Ë¥•: ' + error.message));
        }
      } else {
        console.error('‚ùå ÂêàÁ∫¶ÈÉ®ÁΩ≤Â§±Ë¥•ÔºåÈÄÄÂá∫‰ª£Á†Å:', code);
        console.error('Ê†áÂáÜËæìÂá∫:', stdout);
        console.error('ÈîôËØØËæìÂá∫:', stderr);
        
        let errorMsg = `ÂêàÁ∫¶ÈÉ®ÁΩ≤Â§±Ë¥•ÔºåÈÄÄÂá∫‰ª£Á†Å: ${code}\n\n`;
        errorMsg += 'ÂèØËÉΩÁöÑÂéüÂõ†:\n';
        errorMsg += '1. ÁéØÂ¢ÉÂèòÈáèÈÖçÁΩÆÈîôËØØ (SEPOLIA_RPC_URL, PRIVATE_KEY)\n';
        errorMsg += '2. ÁßÅÈí•ÂØπÂ∫îÁöÑÂú∞ÂùÄ‰ΩôÈ¢ù‰∏çË∂≥\n';
        errorMsg += '3. ÁΩëÁªúËøûÊé•ÈóÆÈ¢ò\n';
        errorMsg += '4. ÂêàÁ∫¶ÁºñËØëÈîôËØØ\n';
        errorMsg += '5. ÊùÉÈôêÈóÆÈ¢ò\n\n';
        errorMsg += 'Ê†áÂáÜËæìÂá∫:\n';
        errorMsg += stdout || '(Êó†ËæìÂá∫)\n';
        errorMsg += '\nÈîôËØØËæìÂá∫:\n';
        errorMsg += stderr || '(Êó†ÈîôËØØËæìÂá∫)';
        
        reject(new Error(errorMsg));
      }
    });
    
    hardhatProcess.on('error', (error) => {
      console.error('‚ùå ÂêØÂä®hardhatËøõÁ®ãÂ§±Ë¥•:', error);
      
      let errorMsg = 'ÂêØÂä®hardhatËøõÁ®ãÂ§±Ë¥•\n\n';
      errorMsg += 'ÂèØËÉΩÁöÑÂéüÂõ†:\n';
      errorMsg += '1. Node.jsÊú™ÂÆâË£ÖÊàñÁâàÊú¨Ëøá‰Ωé\n';
      errorMsg += '2. npm/npxÊú™ÂÆâË£Ö\n';
      errorMsg += '3. hardhatÊú™ÂÆâË£ÖÊàñÈÖçÁΩÆÈîôËØØ\n';
      errorMsg += '4. ÊùÉÈôêÈóÆÈ¢ò\n';
      errorMsg += '5. Ë∑ØÂæÑÈóÆÈ¢ò\n\n';
      errorMsg += 'ÈîôËØØËØ¶ÊÉÖ: ' + error.message;
      
      reject(new Error(errorMsg));
    });
    
    // ËÆæÁΩÆË∂ÖÊó∂Ôºà5ÂàÜÈíüÔºâ
    setTimeout(() => {
      hardhatProcess.kill();
      let errorMsg = 'ÂêàÁ∫¶ÈÉ®ÁΩ≤Ë∂ÖÊó∂Ôºà5ÂàÜÈíüÔºâ\n\n';
      errorMsg += 'ÂèØËÉΩÁöÑÂéüÂõ†:\n';
      errorMsg += '1. ÁΩëÁªúËøûÊé•ÁºìÊÖ¢\n';
      errorMsg += '2. ÂêàÁ∫¶ÈÉ®ÁΩ≤ÈúÄË¶ÅÊõ¥Â§öÊó∂Èó¥\n';
      errorMsg += '3. Âå∫ÂùóÈìæÁΩëÁªúÊã•Â†µ\n';
      errorMsg += '4. ÁßÅÈí•‰ΩôÈ¢ù‰∏çË∂≥ÂØºËá¥‰∫§ÊòìÂç°‰Ωè\n\n';
      errorMsg += 'Âª∫ËÆÆ:\n';
      errorMsg += '1. Ê£ÄÊü•ÁΩëÁªúËøûÊé•\n';
      errorMsg += '2. Á°ÆËÆ§ÁßÅÈí•‰ΩôÈ¢ùÂÖÖË∂≥\n';
      errorMsg += '3. Á®çÂêéÈáçËØï\n';
      errorMsg += '4. Ê£ÄÊü•Âå∫ÂùóÈìæÁΩëÁªúÁä∂ÊÄÅ';
      
      reject(new Error(errorMsg));
    }, 300000);
  });
};

module.exports = {
  getAllProjects,
  getProjectByCode,
  createProject,
  updateProjectSubscription,
  deploySmartContracts
};
