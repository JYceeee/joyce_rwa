import{_ as v,c,o as u,a as t,n as h,t as n,b as g,F as R,r as f,d as i,u as A}from"./index-MO2QwcWx.js";const _={name:"ContractAddressTestView",setup(){const{connected:s,fullAddress:e}=A();return{connected:s,fullAddress:e}},data(){return{loading:!1,results:[],contractServiceReady:!1,currentContractAddress:null,currentWalletAddress:null,monitoringInterval:null}},computed:{walletConnected(){return this.connected.value&&this.fullAddress.value},walletAddress(){return this.fullAddress.value},addressesMatch(){return this.currentContractAddress&&this.currentWalletAddress&&this.currentContractAddress.toLowerCase()===this.currentWalletAddress.toLowerCase()}},async mounted(){await this.initializeContractService(),this.startMonitoring()},beforeUnmount(){this.stopMonitoring()},methods:{async initializeContractService(){try{await i.initialize(),this.contractServiceReady=!0,this.addResult("success","ContractService初始化成功","智能合约服务已成功初始化")}catch(s){this.addResult("error","ContractService初始化失败",s.message)}},async testGetUserAddress(){this.loading=!0;try{this.addResult("info","开始测试获取用户地址","正在调用contractService.getUserAddress()");const s=await i.getUserAddress();s?(this.addResult("success","地址获取成功",`获取到地址: ${s}`,{address:s,shortAddress:this.formatAddress(s),method:"contractService.getUserAddress()"}),this.currentContractAddress=s):this.addResult("error","地址获取失败","contractService.getUserAddress()返回null")}catch(s){this.addResult("error","地址获取异常",s.message)}finally{this.loading=!1}},async testValidateAddress(){this.loading=!0;try{this.addResult("info","开始测试地址验证","正在调用contractService.validateUserAddress()");const s=await i.validateUserAddress();this.addResult(s.success?"success":"error",s.success?"地址验证成功":"地址验证失败",s.success?`验证通过: ${s.address}`:s.error,s),s.success&&(this.currentContractAddress=s.address)}catch(s){this.addResult("error","地址验证异常",s.message)}finally{this.loading=!1}},async testMultipleMethods(){this.loading=!0;try{this.addResult("info","开始多方法测试","测试不同的地址获取方式");const s=await i.getUserAddress();this.addResult(s?"success":"error","方法1: contractService.getUserAddress()",s?`成功: ${s}`:"失败",{address:s});const e=await i.validateUserAddress();this.addResult(e.success?"success":"error","方法2: contractService.validateUserAddress()",e.success?`成功: ${e.address}`:`失败: ${e.error}`,e);const o=this.walletAddress;this.addResult(o?"success":"error","方法3: useWallet.fullAddress",o?`成功: ${o}`:"失败",{address:o,connected:this.walletConnected});try{const a=await window.ethereum.request({method:"eth_accounts"}),d=a&&a.length>0?a[0]:null;this.addResult(d?"success":"error","方法4: window.ethereum.eth_accounts",d?`成功: ${d}`:"失败",{address:d,accounts:a})}catch(a){this.addResult("error","方法4: window.ethereum.eth_accounts",a.message)}}catch(s){this.addResult("error","多方法测试异常",s.message)}finally{this.loading=!1}},async testTradingMethods(){this.loading=!0;try{this.addResult("info","开始交易方法测试","测试智能合约交易方法中的地址获取"),this.addResult("info","测试buyTokens方法","测试购买代币方法中的地址获取");try{const s=await i.buyTokens(1);this.addResult(s.success?"success":"error","buyTokens方法测试",s.success?`成功获取地址: ${s.userAddress}`:`失败: ${s.error}`,s)}catch(s){this.addResult("error","buyTokens方法异常",s.message)}this.addResult("info","测试sellTokens方法","测试出售代币方法中的地址获取");try{const s=await i.sellTokens(1);this.addResult(s.success?"success":"error","sellTokens方法测试",s.success?`成功获取地址: ${s.userAddress}`:`失败: ${s.error}`,s)}catch(s){this.addResult("error","sellTokens方法异常",s.message)}this.addResult("info","测试getUserTokenBalance方法","测试获取用户代币余额方法中的地址获取");try{const s=await i.getUserTokenBalance();this.addResult("success","getUserTokenBalance方法测试",`成功获取余额: ${s}`,{balance:s,method:"getUserTokenBalance"})}catch(s){this.addResult("error","getUserTokenBalance方法异常",s.message)}}catch(s){this.addResult("error","交易方法测试异常",s.message)}finally{this.loading=!1}},refreshMonitoring(){this.currentWalletAddress=this.walletAddress,this.addResult("info","监控数据刷新","实时监控数据已更新")},startMonitoring(){this.monitoringInterval=setInterval(()=>{this.currentWalletAddress=this.walletAddress},2e3)},stopMonitoring(){this.monitoringInterval&&(clearInterval(this.monitoringInterval),this.monitoringInterval=null)},addResult(s,e,o,a=null){this.results.unshift({type:s,title:e,message:o,data:a,timestamp:Date.now()}),this.results.length>20&&(this.results=this.results.slice(0,20))},clearResults(){this.results=[]},getResultIcon(s){return{success:"✅",error:"❌",warning:"⚠️",info:"ℹ️"}[s]||"📝"},formatTime(s){return new Date(s).toLocaleTimeString()},formatAddress(s){return s?`${s.slice(0,6)}...${s.slice(-4)}`:""}}},b={class:"container"},y={class:"test-page"},w={class:"test-section"},C={class:"status-grid"},k={class:"status-item"},T={class:"status-item"},S={class:"address"},M={class:"status-item"},U={class:"test-section"},p={class:"test-buttons"},W=["disabled"],I=["disabled"],B=["disabled"],V=["disabled"],E={class:"test-section"},z={class:"results-container"},L={key:0,class:"no-results"},x={class:"result-header"},D={class:"result-icon"},G={class:"result-title"},N={class:"result-time"},F={class:"result-content"},q={class:"result-message"},J={key:0,class:"result-data"},O={class:"test-section"},j={class:"monitor-grid"},H={class:"monitor-item"},K={class:"address"},P={class:"monitor-item"},Q={class:"address"},X={class:"monitor-item"};function Y(s,e,o,a,d,r){return u(),c("div",b,[t("div",y,[e[16]||(e[16]=t("h1",null,"智能合约地址验证测试",-1)),e[17]||(e[17]=t("p",null,"测试智能合约服务获取和验证用户钱包地址的功能",-1)),t("div",w,[e[9]||(e[9]=t("h2",null,"钱包连接状态",-1)),t("div",C,[t("div",k,[e[6]||(e[6]=t("label",null,"useWallet连接状态:",-1)),t("span",{class:h(r.walletConnected?"success":"error")},n(r.walletConnected?"已连接":"未连接"),3)]),t("div",T,[e[7]||(e[7]=t("label",null,"useWallet地址:",-1)),t("span",S,n(r.walletAddress||"无"),1)]),t("div",M,[e[8]||(e[8]=t("label",null,"ContractService状态:",-1)),t("span",{class:h(d.contractServiceReady?"success":"error")},n(d.contractServiceReady?"已初始化":"未初始化"),3)])])]),t("div",U,[e[10]||(e[10]=t("h2",null,"地址获取测试",-1)),t("div",p,[t("button",{onClick:e[0]||(e[0]=(...l)=>r.testGetUserAddress&&r.testGetUserAddress(...l)),disabled:d.loading,class:"test-btn"},n(d.loading?"测试中...":"测试获取用户地址"),9,W),t("button",{onClick:e[1]||(e[1]=(...l)=>r.testValidateAddress&&r.testValidateAddress(...l)),disabled:d.loading,class:"test-btn"}," 测试地址验证 ",8,I),t("button",{onClick:e[2]||(e[2]=(...l)=>r.testMultipleMethods&&r.testMultipleMethods(...l)),disabled:d.loading,class:"test-btn"}," 测试多种获取方式 ",8,B),t("button",{onClick:e[3]||(e[3]=(...l)=>r.testTradingMethods&&r.testTradingMethods(...l)),disabled:d.loading,class:"test-btn"}," 测试交易方法地址获取 ",8,V),t("button",{onClick:e[4]||(e[4]=(...l)=>r.clearResults&&r.clearResults(...l)),class:"test-btn secondary"}," 清除结果 ")])]),t("div",E,[e[11]||(e[11]=t("h2",null,"测试结果",-1)),t("div",z,[d.results.length===0?(u(),c("div",L," 暂无测试结果，点击上方按钮开始测试 ")):g("",!0),(u(!0),c(R,null,f(d.results,(l,m)=>(u(),c("div",{key:m,class:"result-item"},[t("div",x,[t("span",D,n(r.getResultIcon(l.type)),1),t("span",G,n(l.title),1),t("span",N,n(r.formatTime(l.timestamp)),1)]),t("div",F,[t("div",q,n(l.message),1),l.data?(u(),c("div",J,[t("pre",null,n(JSON.stringify(l.data,null,2)),1)])):g("",!0)])]))),128))])]),t("div",O,[e[15]||(e[15]=t("h2",null,"实时地址监控",-1)),t("div",j,[t("div",H,[e[12]||(e[12]=t("label",null,"ContractService地址:",-1)),t("span",K,n(d.currentContractAddress||"无"),1)]),t("div",P,[e[13]||(e[13]=t("label",null,"useWallet地址:",-1)),t("span",Q,n(d.currentWalletAddress||"无"),1)]),t("div",X,[e[14]||(e[14]=t("label",null,"地址一致性:",-1)),t("span",{class:h(r.addressesMatch?"success":"warning")},n(r.addressesMatch?"一致":"不一致"),3)])]),t("button",{onClick:e[5]||(e[5]=(...l)=>r.refreshMonitoring&&r.refreshMonitoring(...l)),class:"test-btn small"}," 刷新监控 ")])])])}const $=v(_,[["render",Y],["__scopeId","data-v-6ee82fc4"]]);export{$ as default};
